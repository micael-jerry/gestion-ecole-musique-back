// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String  @id @default(uuid())
  name        String  @unique @db.VarChar()
  description String? @db.Text
  users       User[]
}

model Setting {
  id          String  @id @default(uuid())
  name        String  @unique
  value       Float
  description String? @db.Text
  tag         String  @unique @db.VarChar(50)
}

model FeeType {
  id          String  @id @default(uuid())
  name        String  @unique @db.VarChar()
  description String?
  value       Float   @default(0)
  payment     Payment[]
}

model Role {
  id      String   @id @default(uuid())
  name    String   @unique
  actions Action[]
  users   User[]
}

model Action {
  id          String  @id @default(uuid())
  tag         String  @unique
  name        String
  description String?
  roles       Role[]
}

model User {
  id          String    @id @default(uuid())
  roleId      String
  firstname   String    @db.VarChar(100)
  lastname    String    @db.VarChar(100)
  email       String    @unique @db.VarChar(50)
  password    String
  address     String    @db.VarChar()
  phone       String?   @db.VarChar(20)
  picture     String?   @db.VarChar()
  description String?
  isArchive   Boolean   @default(false)
  role        Role      @relation(fields: [roleId], references: [id])
  courses     Course[]
  History     History[]
  payments    Payment[]
}

enum EntityType {
  COURSE
  SETTING
  FEE_TYPE
  ROLE
  USER
  PAYMENT
}

enum OperationType {
  CREATE
  UPDATE
  DELETE
  ARCHIVE
  UNARCHIVE
}

model History {
  id            String        @id @default(uuid())
  entityId      String
  entityType    EntityType
  operationType OperationType
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
}


model Payment {
  id          String  @id @default(uuid())
  amount      Float
  description String?
  date        DateTime[]
  paymentType PaymentType
  userId      String
  createdAt   DateTime @default(now())
  user       User    @relation(fields: [userId], references: [id])
  feeTypeId   String
  feeType     FeeType @relation(fields: [feeTypeId], references: [id])
}

enum PaymentType {
  CASH
  BANK
  MOBILE
  CARD
}